""" 
Interactive Test for '0-add_integer module'

Check for module's docstring
>>> mod = __import__('0-add_integer').__doc__
>>> len(mod) > 1
True

Import function to test and check docstring
>>> add = __import__('0-add_integer').add_integer
>>> len(add.__doc__) > 1
True

Check when few or no arguments are passed:
>>> add()
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: add_integer() missing 1 required positional argument: 'a'

Check when many arguments are passed:
>>> add(1, 2, 3)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: add_integer() takes from 1 to 2 positional arguments but 3 were given

Check for normal situations (ints and floats)
1. a and b passed as integers
>>> add(1, 2)
3

2. b passed as a float
>>> add(1, 2.1)
3

3. a passed as a float
>>> add(1.6, 2)
3

4. a is positive, b is negative
>>> add(1, -3)
-2

5. a is negative, b is positive
>>> add(-1, 3)
2

6. a and b are negative
>>> add(-1, -3)
-4

7. Check for when one argument is present, that is 'a'
>>> add(1)
99

Check for error scenarios: unwanted data types
1. a passed as None
>>> try:
...	add(None)
... except Exception as e:
...	print(e)
...
a must be an integer

2. b passed as None
>>> try:
...	add(1, None)
... except Exception as e:
...	print(e)
...
b must be an integer

3. a passed as a string
>>> try:
...	add('hello', 2)
... except Exception as e:
...	print(e)
...
a must be an integer

4. b passed as a string
>>> try:
...	add(1, 'hello')
... except Exception as e:
...	print(e)
...
b must be an integer

5. passing NaN value (Value Error)
>>> try:
...	add(float("nan"))
... except Exception as e:
...	print(e)
...
cannot convert float NaN to integer

6. passing positive infinity (Overflow Error)
>>> try:
...	add(float("inf"))
... except Exception as e:
...	print(e)
...
cannot convert float infinity to integer

7. passing negative infinity (Overflow Error)
>>> try:
...	add(float("-inf"))
... except Exception as e:
...	print(e)
...
cannot convert float infinity to integer
>>>
"""
