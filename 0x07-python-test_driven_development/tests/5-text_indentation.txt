"""
Interactive test for text_indentation function

Check module's docstring
>>> mod = __import__('5-text_indentation').__doc__
>>> len(mod) > 1
True

Import function to test and check docstring
>>> text_indentation = __import__('5-text_indentation').text_indentation
>>> len(text_indentation.__doc__) > 1
True

Checks for normal scenarios
1. Multiple delimeters
>>> text_indentation("Hello. My name is Morpheus: \
... What is your name?")
Hello.
<BLANKLINE>
My name is Morpheus:
<BLANKLINE>
What is your name?
<BLANKLINE>

2. No delimeter at the end
>>> text_indentation("Hello. My name is Morpheus: \
... What is your name? Welcome to the matrix")
Hello.
<BLANKLINE>
My name is Morpheus:
<BLANKLINE>
What is your name?
<BLANKLINE>
Welcome to the matrix

3. No delimeter check
>>> text_indentation("Hello! My name is Morpheus")
Hello! My name is Morpheus

4. Leading and lagging whitespaces check with no delimeter at the end
>>> text_indentation("    Hello.     My name is Morpheus: \
... What is your name?     Welcome to the matrix     ")
Hello.
<BLANKLINE>
My name is Morpheus:
<BLANKLINE>
What is your name?
<BLANKLINE>
Welcome to the matrix

5. Leading and lagging whitespaces check with delimeter at the end
>>> text_indentation("    Hello.     My name is Morpheus   : \
... What is your name    ?   ")
Hello.
<BLANKLINE>
My name is Morpheus   :
<BLANKLINE>
What is your name    ?
<BLANKLINE>

Check error scenarios
1. Pass list as argument(TypeError)
>>> try:
... 	text_indentation(["hello"])
... except Exception as e:
... 	print(e)
text must be a string

2. Pass tuple as argument
>>> try:
... 	text_indentation(("hello", "world"))
... except Exception as e:
... 	print(e)
text must be a string
>>>
"""
